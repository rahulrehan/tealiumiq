<?php

/**
 * @file
 * Tealium iQ Integration.
 */

use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_page_attachments().
 */
function tealiumiq_page_attachments(array &$attachments) {
  // Example Code to implement tealium tags.
  $route = \Drupal::routeMatch()->getRouteObject();
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);

  // Allow API only check, maybe other modules want to have their own
  // custom or headless / decoupled implementation.
  $apiOnly = \Drupal::config('tealiumiq.settings')->get('api_only');

  if (!$is_admin && $apiOnly == FALSE) {
    // Get the Tealium iQ service.
    $tealiumiq = \Drupal::service('tealiumiq.tealiumiq');

    if ($tealiumiq->getAsync() == TRUE) {
      // Set the properties from route.
      $tealiumiq->setUdoPropertiesFromRoute();

      // Get all Tealium iQ properties.
      $properties = $tealiumiq->getProperties();

      // Add lib and settings if async is true.
      if (!empty($properties)) {
        $attachments['#attached']['library'][] = 'tealiumiq/tealiumiq_async';
        $attachments['#attached']['drupalSettings']['tealiumiq']['tealiumiq'] = [
          'utagurl' => $tealiumiq->getUtagUrl(),
          'async' => $tealiumiq->getAsync(),
        ];

        // Add utag data.
        $attachments['#attached']['drupalSettings']['tealiumiq']['tealiumiq']['utagData'] = $properties;
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function tealiumiq_theme($existing, $type, $theme, $path) {
  return [
    'tealium_sync' => [
      'template' => 'tealium_sync',
      'path' => $path . '/templates',
      'variables' => [
        'utagurl' => NULL,
        'utagdata' => NULL,
      ],
    ],
    'webform_handler_webform_tealiumiq_summary' => [
      'variables' => [
        'settings' => NULL,
        'handler' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_page_bottom().
 */
function tealiumiq_page_bottom(array &$page_bottom) {
  $route = \Drupal::routeMatch()->getRouteObject();
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);

  // Allow API only check, maybe other modules want to have their own
  // custom or headless / decoupled implementation.
  $apiOnly = \Drupal::config('tealiumiq.settings')->get('api_only');

  // Get Sync load position.
  $syncLoadPosition = \Drupal::config('tealiumiq.settings')->get('sync_load_position');

  if (!$is_admin && $apiOnly == FALSE) {
    $tealiumiq = \Drupal::service('tealiumiq.tealiumiq');

    // Only set the tags if Synchronous tags is enabled.
    if ($tealiumiq->getAsync() == FALSE && $syncLoadPosition == 'bottom') {
      // Set the properties from route.
      $tealiumiq->setUdoPropertiesFromRoute();

      // Only do this if sync version of Tealium iQ is required.
      if (!empty($tealiumiq->getProperties())) {
        $page_bottom['tealiumiq'] = [
          '#theme' => 'tealium_sync',
          '#utagurl' => 'https:' . $tealiumiq->getUtagUrl(),
          '#utagdata' => $tealiumiq->getPropertiesJson(),
        ];
      }
    }
  }
}

/**
 * Implements hook_page_top().
 */
function tealiumiq_page_top(array &$page_top) {
  $route = \Drupal::routeMatch()->getRouteObject();
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);

  // Allow API only check, maybe other modules want to have their own
  // custom or headless / decoupled implementation.
  $apiOnly = \Drupal::config('tealiumiq.settings')->get('api_only');

  // Get Sync load position.
  $syncLoadPosition = \Drupal::config('tealiumiq.settings')->get('sync_load_position');

  if (!$is_admin && $apiOnly == FALSE) {
    $tealiumiq = \Drupal::service('tealiumiq.tealiumiq');

    // Only set the tags if Synchronous tags is enabled.
    if ($tealiumiq->getAsync() == FALSE && $syncLoadPosition == 'top') {
      // Set the properties from route.
      $tealiumiq->setUdoPropertiesFromRoute();

      // Only do this if sync version of Tealium iQ is required.
      if (!empty($tealiumiq->getProperties())) {
        $page_top['tealiumiq'] = [
          '#theme' => 'tealium_sync',
          '#utagurl' => 'https:' . $tealiumiq->getUtagUrl(),
          '#utagdata' => $tealiumiq->getPropertiesJson(),
        ];
      }
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 *
 * Create a "fake" tealium field so we can store tags for REST.
 * Normalisers will run on this field.
 *
 * @see \metatag_entity_base_field_info()
 */
function tealiumiq_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  $base_table = $entity_type->getBaseTable();
  $canonical_template_exists = $entity_type->hasLinkTemplate('canonical');

  // Certain classes are just not supported.
  $original_class = $entity_type->getOriginalClass();
  $classes_to_skip = [
    'Drupal\comment\Entity\Comment',
  ];

  // If the entity type doesn't have a base table, has no link template then
  // there's no point in supporting it.
  if (!empty($base_table) && $canonical_template_exists && !in_array($original_class, $classes_to_skip)) {
    $fields['tealiumiq'] = BaseFieldDefinition::create('map')
      ->setLabel(t('Tealium Tags'))
      ->setDescription(t('The Tealium tags for the entity.'))
      ->setClass('\Drupal\tealiumiq\Plugin\Field\TealiumiqEntityFieldItemList')
      ->setComputed(TRUE)
      ->setTranslatable(TRUE)
      ->setTargetEntityTypeId($entity_type->id());
  }

  return $fields;
}

/**
 * Webform submission callback to prepare TealiumIQ tags.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return \Drupal\webform\Ajax\WebformSubmissionAjaxResponse
 *   An ajax response.
 */
function tealiumiq_webform_ajax_callback(&$form, FormStateInterface $form_state) {

  /** @var \Drupal\webform\WebformSubmissionForm $form_object */
  $form_object = $form_state->getFormObject();

  // If errors, call the default #ajax callback.
  // @see \Drupal\webform\Form\WebformAjaxFormTrait::submitAjaxForm
  if ($form_state->hasAnyErrors()) {
    /** @var \Drupal\webform\Ajax\WebformSubmissionAjaxResponse $response */
    $response = $form_object->submitAjaxForm($form, $form_state);
  }
  else {
    // No errors, so call the default callback.
    /** @var \Drupal\webform\Ajax\WebformSubmissionAjaxResponse $response */
    $response = $form_object->submitAjaxForm($form, $form_state);

    // Get the tags, including any from the form handler.
    $tags = \Drupal::service('tealiumiq.helper')->tagsFromRoute();

    // Invoke our callback, adding the tags.
    /** InvokeCommand($selector, $method, array $arguments = []) */
    $response->addCommand(new InvokeCommand(NULL, 'tealiumiqWebformAjaxSubmit', [$tags]));
  }

  return $response;
}
